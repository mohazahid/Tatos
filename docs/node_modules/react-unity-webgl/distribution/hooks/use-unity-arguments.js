"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUnityArguments = void 0;
var react_1 = require("react");
/**
 * Creates a memoized Unity Arguments object which can be passed to the Unity
 * instance in order to initialize it.
 * @param unityProps The Unity props provided the the Unity component.
 * @returns The Unity arguments to pass to the Unity instance.
 */
var useUnityArguments = function (unityProps) {
    return (0, react_1.useMemo)(function () { return (__assign(__assign({}, unityProps.unityProvider.unityConfig), { 
        /**
         * Print event hooks will be intercepted in order to catch messages and send
         * them to the unity context instead.
         * @param message The message to be printed.
         */
        print: function (message) {
            // This hook is disabled due to incorrect implementation in Unity.
            // unityContext.dispatchEvent("debug", message);
        }, 
        /**
         * Print error event hooks will be intercepted in order to catch error
         * messages and send them to the unity context instead.
         * @param error The error to be printed.
         */
        printErr: function (error) {
            // This hook is disabled due to incorrect implementation in Unity.
            // unityContext.dispatchEvent("error", error);
        }, 
        /**
         * When the device pixel ratio is defined via the Unity Props, it's value
         * will be appended to the Unity arguments object.
         */
        devicePixelRatio: unityProps.devicePixelRatio, 
        /**
         * When the match WebGL to Canvas Size boolean is defined via the Unity
         * Props, it's value will be appended to the Unity arguments object.
         */
        matchWebGLToCanvasSize: unityProps.matchWebGLToCanvasSize, 
        /**
         * When the WebGL Context Attributes object is defined via the Unity
         * Config, it's value will be appended to the Unity arguments object.
         */
        webglContextAttributes: unityProps.unityProvider.unityConfig.webglContextAttributes || {} })); }, [
        unityProps.devicePixelRatio,
        unityProps.matchWebGLToCanvasSize,
        unityProps.unityProvider.unityConfig,
    ]);
};
exports.useUnityArguments = useUnityArguments;
